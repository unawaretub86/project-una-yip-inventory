// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/PC/Desktop/project-una-yip-inventory/internal/domain/inventory/repository/database/database.go
//
// Generated by this command:
//
//	mockgen -source=C:/Users/PC/Desktop/project-una-yip-inventory/internal/domain/inventory/repository/database/database.go -destination=C:/Users/PC/Desktop/project-una-yip-inventory/internal/domain/inventory/repository/database/mocks/mocks/go
//

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	entities "github.com/unawaretub86/project-una-yip-inventory/internal/domain/inventory/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockDatabase) CreateItem(arg0 *entities.TechItem) (*entities.TechItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0)
	ret0, _ := ret[0].(*entities.TechItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockDatabaseMockRecorder) CreateItem(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockDatabase)(nil).CreateItem), arg0)
}

// GetInventory mocks base method.
func (m *MockDatabase) GetInventory() (*entities.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory")
	ret0, _ := ret[0].(*entities.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockDatabaseMockRecorder) GetInventory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockDatabase)(nil).GetInventory))
}

// GetItemById mocks base method.
func (m *MockDatabase) GetItemById(arg0 int64) (*entities.TechItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", arg0)
	ret0, _ := ret[0].(*entities.TechItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockDatabaseMockRecorder) GetItemById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockDatabase)(nil).GetItemById), arg0)
}

// UpdateItem mocks base method.
func (m *MockDatabase) UpdateItem(arg0 int64, arg1 *entities.TechItem) (*entities.TechItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0, arg1)
	ret0, _ := ret[0].(*entities.TechItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockDatabaseMockRecorder) UpdateItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockDatabase)(nil).UpdateItem), arg0, arg1)
}
